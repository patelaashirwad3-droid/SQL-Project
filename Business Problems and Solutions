
-- Identify the most popular author based on total borrowings.

select Top 1
a.Name as Author_Name, sum(Fine) as Total_Fine
from Authors a
join Books b on a.Author_id = b.Author_id
join BookCopies bc on b.Book_id = bc.Book_id
join IssueRecords i on bc.Copy_id = i.Copy_id
group by a.Name
order by Total_Fine desc


-- Find the average borrowing duration (days between Issue_date and Return_date) for students vs faculty.

select u.user_type,
Avg(datediff(day,i.issue_date,Return_date)) as Avg_Duration_Days
from Users u
join  IssueRecords i on
u.user_id = i.user_id
where datediff(day,i.issue_date,Return_date) is not null
group by u.user_type


-- Show the percentage of books currently issued vs available.(peding)

select Status,
count(Status) as Total_copies,
Round(100.0 * count(*) / (select Count(*) from BookCopies),2) as Percentage
from bookCopies
group by Status


-- Which publisherâ€™s books are borrowed the most?


select Top 1
p.Name as Publisher_Name,Count(*) as Most_Borrowed
from Publisher p
join Books b on p.Publisher_id = b.Publisher_id
join BookCopies bc on b.Book_id = bc.Book_id
join IssueRecords i on bc.Copy_id = i.Copy_id
group by p.Name
order by Most_Borrowed desc




-- Identify users who borrowed books but never returned them (Return_date IS NULL).

select u.user_id as Never_Retur_Book
from Users u
join IssueRecords i
on u.user_id = i.user_id
where Return_date IS NULL


-- Calculate the monthly borrowing trend: number of books issued each month in 2025.

select 
format(Issue_date,'yyyy-MM') as MOnths,
count(*) as Number_of_Books
from Issuerecords
where year(Issue_date)= '2025'
Group by format(Issue_date,'yyyy-MM')


-- Find the top 5 users with the highest borrowing frequency.

select Top 5
u.user_id,Count(Issue_Date) as Maximum_borrowing_frequency
from Users u
join IssueRecords i
on u.user_id = i.user_id
group by u.user_id

-- Show the book copies that were borrowed multiple times by different users.(peding)

SELECT 
i.Copy_id,
b.Title,
COUNT(DISTINCT i.user_id) AS DistinctUsers,
COUNT(i.Issue_id) AS TotalBorrowings
FROM IssueRecords i
JOIN BookCopies bc ON i.Copy_id = bc.Copy_id
JOIN Books b ON bc.Book_id = b.Book_id
GROUP BY i.Copy_id, b.Title
HAVING COUNT(DISTINCT i.user_id) > 1;


-- Calculate the total revenue from fines per month in 2025.


select 
format(Return_date,'yyyy-MM') as Months,
sum(Fine) as Total_Fine
from Issuerecords
where year(Return_date) = 2025
group by format(Return_date,'yyyy-MM') 


-- Compare borrowing trends between Students and Faculty (number of books issued, average fine).

select u.user_type,
count(i.issue_id),
AVg(i.Fine) as Average_fine
from users u
join IssueRecords i 
on u.user_id = i.user_id
group by u.user_type


-- Identify which genre/author should the library invest in more (based on borrowings & popularity).

select a.Name as Authors_Name,
Count(i.Issue_id) as Total_Borrowing
from Authors a
join Books b on a.Author_id = b.Author_id
join BookCopies bc on b.Book_id = bc.Book_id
join IssueRecords i on bc.Copy_id = i.Copy_id
Group by a.Name
order by Count(i.Issue_id) desc


-- Predict resource utilization: if 70% of issued books are returned late, which users are contributing most to late returns?

select 
u.Name as users_name,
u.user_type,
count(i.issue_id) as Late_Returns
from Users u
join IssueRecords i on u.user_id = i.user_id
where i.Return_Date > i.Due_date
group by u.Name,u.user_type
order by Late_Returns



-- Find the top 3 high-value users (based on number of borrowings + fines paid).

select top 3
u.user_id,
u.Name,
u.user_type,
count(i.issue_id) as Total_Borrowing,
sum(Fine) as Total_Fine,
(count(i.issue_id) + sum(Fine)) as User_Value_Score
from Users u
join IssueRecords i on u.user_id = i.user_id
group by u.user_id,u.Name,u.user_type
order by User_Value_Score desc
